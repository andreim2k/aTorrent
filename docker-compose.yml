version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///app/atorrent.db
      - DEBUG=true
      - SECRET_KEY=your-secret-key-change-in-production
      - ALLOWED_ORIGINS=["http://localhost:3000", "http://127.0.0.1:3000"]
      - DOWNLOAD_PATH=/app/downloads
    volumes:
      - ./backend:/app
      - ./downloads:/app/downloads
      - backend_data:/app/data
    networks:
      - atorrent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - atorrent-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database (optional - for production)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: atorrent
      POSTGRES_USER: atorrent
      POSTGRES_PASSWORD: atorrent_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - atorrent-network
    ports:
      - "5432:5432"
    restart: unless-stopped
    profiles: ["production"]

  # Redis for caching and sessions (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - atorrent-network
    restart: unless-stopped
    profiles: ["production"]

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - atorrent-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles: ["production"]

volumes:
  backend_data:
  postgres_data:
  redis_data:

networks:
  atorrent-network:
    driver: bridge
